prop.test(43*4, 400, p=.5, alt="less", correct=FALSE)
?t.test
power.t.test(n=36,delta=5,sd=9,type='one.sample',alternative='one.sided')
power <- 1-pnorm(xbarboundary,5,9/sqrt(36))
boundary <- qnorm(0.95)
xbarboundary <- qnorm(0.95,0,9/sqrt(36))
power <- 1-pnorm(xbarboundary,5,9/sqrt(36))
power
?power.t.test
library(dplyr)
library(tidyr)
path <- "/Users/ericweber/Dropbox/msba/Course_S_16_HINF_5531/Week_6/nnhs_residents.csv"
residents <- read.csv(path, header=TRUE)
residents_icd9 <- residents[,c("resnum", "facnum", "cddx1","cddx2",
"cddx3","cddx4","cddx5","cddx6","cddx7",
"cddx8","cddx9","cddx10","cddx11",
"cddx12","cddx13","cddx14", "cddx15", "cddx16")]
residents_long<-reshape(residents_icd9, varying=c(3:18), direction="long", timevar = "cddx_", v.names = "icd_9",idvar = "resnum")
library(dplyr)
library(tidyr)
path <- "/Users/ericweber/Dropbox/msba/Course_2016_Spring_HINF_5531/Week_6/nnhs_residents.csv "
residents <- read.csv(path, header=TRUE)
residents_icd9 <- residents[,c("resnum", "facnum", "cddx1","cddx2",
"cddx3","cddx4","cddx5","cddx6","cddx7",
"cddx8","cddx9","cddx10","cddx11",
"cddx12","cddx13","cddx14", "cddx15", "cddx16")]
residents_long<-reshape(residents_icd9, varying=c(3:18), direction="long", timevar = "cddx_", v.names = "icd_9",idvar = "resnum")
View(residents_long)
counted_codes <- count(residents_long, 'icd_9')
ordered_by_count <- counted_codes[order(counted_codes$freq,decreasing = TRUE),]
library(plyr)
counted_codes <- count(residents_long, 'icd_9')
ordered_by_count <- counted_codes[order(counted_codes$freq,decreasing = TRUE),]
View(ordered_by_count)
load("/Users/ericweber/Dropbox/MSBA/Course_S_16_HINF_5531/Week_7/HINF5531_Homework5_Data.RData")
bms_stock_price <- read.csv("~/Dropbox/MSBA/Course_2016_Spring_MILI_6235/Week_1/bms_stock_price.csv")
View(bms_stock_price)
?as.Date
bms_stock_price$Date <- as.Date(bms_stock_price$Date)
View(bms_stock_price)
class(bms_stock_price$Date)
power.t.test(n=NULL, delta=1.5, sd=1, sig.level = .05, power=.8, type = "two.sample", alternative = "two.sided")
power.t.test(n=NULL, delta=1.5, sd=1, sig.level = .05, power=.8, type = "one.sample", alternative = "two.sided")
power.t.test(n=NULL, delta=1.5, sd=1, sig.level = .05, power=.8, type = "one.sample", alternative = "one.sided")
power.t.test(n=NULL, delta=1.5, sd=2, sig.level = .05, power=.8, type = "one.sample", alternative = "one.sided")
power.t.test(n=NULL, delta=1.5, sd=3, sig.level = .05, power=.8, type = "one.sample", alternative = "one.sided")
power.t.test(n=NULL, delta=1.5, sd=3, sig.level = .05, power=.8, type = "paired.sample", alternative = "one.sided")
power.t.test(n=NULL, delta=1.5, sd=3, sig.level = .05, power=.8, type = "paired", alternative = "one.sided")
?t.test
?pt
install.packages(c("shiny", "nlme", "lattice", "lme4", "MCMCglmm", "MASS",
"geepack", "corrplot"), dependencies = TRUE)
install.packages(c("shiny", "nlme", "lattice", "lme4", "MCMCglmm",
f
ovneqn
install.packages(c("shiny", "nlme", "lattice", "lme4", "MCMCglmm", "MASS", "geepack", "corrplot"), dependencies = TRUE)
install.packages(c("shiny", "nlme", "lattice", "lme4", "MCMCglmm",
install.packages(c("shiny", "nlme", "lattice", "lme4", "MCMCglmm"))
install.packages("shiny")
install.packages(c("lme4", "geepack"))
install.packages(c("MCMCglmm", "MASS", "lattice"))
install.packages(c("MCMCglmm", "MASS", "lattice"))
install.packages(c("MCMCglmm", "MASS", "lattice"))
install.packages("splines")
install.packages("irr")
?irr
??irr
install.packages("readr")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
?read_tsv
??read_tsv
?order
install.packages("readxl")
install.packages("gdata")
?order
?file.path
install.packages("XLConnect")
?XLconnect
??XLconnect
?getSheets
??getSheets
??writeWorksheet
??createSheet
??writeWorksheet
install.packages("haven")
library("data.table")
sales <- fread("/Users/ericweber/Downloads/SMITH_BOOKS_FALL_2015.CSV")
View(sales)
sales$std_price <- 100* (sales$storepr/sales$listpr)
?t.test
t.test(sales[,sales$internet= 1 ], sales[,sales$internet = 0], alternative = "less", conf.level=0.95)
t.test(sales[,sales$internet== 1 ], sales[,sales$internet == 0], alternative = "less", conf.level=0.95)
sales_internet <- sales[,sales$internet== 1 ]
sales_physical <- sales[,sales$internet == 0]
t.test(sales_internet, sales_physical, alternative = "less", conf.level=0.95)
hist(sales_internet)
hist(sales_physical)
hist(sales_internet$std_price)
hist(sales_physical$std_price)
View(sales_internet)
library("data.table")
sales <- fread("/Users/ericweber/Downloads/SMITH_BOOKS_FALL_2015.CSV")
sales$std_price <- 100* (sales$storepr/sales$listpr)
sales_internet <- sales[sales[,sales$internet== 1 ]]
sales_physical <- sales[sales[,sales$internet == 0]]
t.test(sales_internet, sales_physical, alternative = "less", conf.level=0.95)
hist(sales_internet$std_price)
hist(sales_physical$std_price)
par(2,1)
hist(sales_internet$std_price)
hist(sales_physical$std_price)
par(mfrow=c(2,1))
hist(sales_internet$std_price)
hist(sales_physical$std_price)
summary(sales_internet$std_price)
summary(sales_physical$std_price)
sales_above <- sales[sales[,sales$listpr >= median(sales$listpr)]]
sales_below <- sales[sales[,sales$listpr < median(sales$listpr)]]
ifelse(sales$listpr >= median(sales$listpr),sales$above_below = 1,sales$above_below = 0 )
ifelse(sales$listpr >= median(sales$listpr),sales$above_below = 1,sales$above_below = 0)
?tapply
sales[[1]]
sales[1]
sales[2]
sales[23]
middle <- median(sales$listpr)
for (i in 1:length(sales)){
ifelse(sales[i]$listpr >=middle ,sales[i]$above_below = 1,sales[i]$above_below = 0)
}
middle <- median(sales$listpr)
for (i in 1:length(sales)){
ifelse(sales[i]$listpr >=middle, 1 <- sales[i]$above_below,0 <- sales[i]$above_below)
}
list_median <- median(sales$listpr)
sales$above_below <- ifelse(sales$listpr >= list_median,1, 0)
View(sales)
library(MASS)
tbl = table(sales$internet, sales$above_below)
tbl
?chisquare
??chisquare
library(MASS)
tbl = table(sales$internet, sales$above_below)
chisq.test(sales$internet, sales$above_below)
prop.test(table(sales$internet, sales$above_below), correct=FALSE)
approach_2_1 <- chisq.test(sales$internet, sales$above_below)
## (approach 2)(diff proportion)
approach_2_2 <- prop.test(table(sales$internet, sales$above_below), correct=FALSE)
approach_2_1
## (approach 1)
approach_3_1 <- chisq.test(sales$internet, sales$hardcovr)
## (approach 2)(diff proportion)
approach_3_2 <- prop.test(table(sales$internet, sales$hardcovr), correct=FALSE)
approach_3_1
approach_3_2
library(MASS)
tbl(sales$internet, sales$popular)
library(MASS)
tbl(sales$internet, sales$above_below)
library(MASS)
table(sales$internet, sales$above_below)
sales_above <- sales[sales$listpr >= median(listpr)]
sales_below <- sales[sales$listpr < median(listpr)]
prop.test(table(sales_above$std_price, sales_below$std_price), correct=FALSE)
sales_above
sales_below
library("data.table")
sales <- fread("/Users/ericweber/Downloads/SMITH_BOOKS_FALL_2015.CSV")
sales$std_price <- 100* (sales$storepr/sales$listpr)
list_median <- median(sales$listpr)
sales$above_below <- ifelse(sales$listpr >= list_median,1, 0)
sales_above <- sales[sales$listpr >= median(listpr)]
sales_below <- sales[sales$listpr < median(listpr)]
sales_internet <- sales[sales[,sales$internet== 1 ]]
sales_physical <- sales[sales[,sales$internet == 0]]
#Summarizing by internet/non
summary(sales_internet$std_price)
summary(sales_physical$std_price)
sales_internet
solution_1_1 <- t.test(sales_internet$std_price, sales_physical$std_price, alternative = "less", conf.level=0.95)
solution_1_1
sales_above_internet <- sales_above[sales_above[,sales_above$internet== 1 ]]
sales_above_physical <- sales_above[sales_above[,sales_above$internet == 0]]
sales_below_internet <- sales_below[sales_below[,sales_below$internet== 1 ]]
sales_below_physical <- sales_below[sales_below[,sales_below$internet == 0]]
t.test(sales_above_internet$std_price, sales_above_physical$std_price, alternative = "two-tailed", conf.level=0.95)
t.test(sales_above_internet$std_price, sales_above_physical$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_below_internet$std_price, sales_below_physical$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_below_internet$std_price, sales_below_physical$std_price, alternative = "two.sided", conf.level=0.95)
var.test(sales_internet$std_price, sales_physical$std_price, alternative = "two.sided")
sales_hardcover <- sales[sales[,sales$hardcovr== 1 ]]
sales_soft <- sales[sales[,sales$hardcovr == 0]]
sales_hardcover[sales_hardcover$internet == 1]
sales_hardcover[sales_hardcover$internet == 1]$std_price
t.test(sales_above[sales_above$internet==1]$std_price, sales_above[sales_above$internet=0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_below[sales_below$internet==1]$std_price, sales_below[sales_below$internet==0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_above[sales_above$internet==1]$std_price,
sales_above[sales_above$internet==0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_below[sales_below$internet==1]$std_price,
sales_below[sales_below$internet==0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_hardcover[sales_hardcover$internet == 1]$std_price,
sales_hardcover[sales_hardcover$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_soft[sales_soft$internet == 1]$std_price,
sales_soft[sales_soft$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
sales_pop <- sales[sales[,sales$popular== 1 ]]
sales_notpop <- sales[sales[,sales$popular == 0]]
t.test(sales_pop[sales_pop$internet == 1]$std_price,
sales_pop[sales_pop$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_notpop[sales_notpop$internet == 1]$std_price,
sales_notpop[sales_notpop$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
var.test(sales_above[sales_above$internet==1]$std_price,
sales_above[sales_above$internet==0]$std_price, alternative = "two.sided")
var.test(sales_below[sales_below$internet==1]$std_price,
sales_below[sales_below$internet==0]$std_price, alternative = "two.sided")
var.test(sales_soft[sales_soft$internet == 1]$std_price,
sales_soft[sales_soft$internet == 0]$std_price, alternative = "two.sided")
sales_bigthree <- sales[,sales$retid == c(1,9,17)]
sales_bigthree <- sales[,sales$retid == 1 | sales$retid == 9 | sales$retid == 17]
sales_bigthree
sales_bigthree <- sales[sales[,sales$retid == 1 | sales$retid == 9 | sales$retid == 17]]
sales_bigthree
?t.test
t.test(sales_bigthree$std_price, sales_notthree$std_price, alternative = "two.sided", conf.level=0.95)
sales_bigthree <- sales[sales[,sales$retid == 1 | sales$retid == 9 | sales$retid == 17]]
sales_notthree <- sales[sales[,sales$retid == 2 | sales$retid == 10 | sales$retid == 11
| sales$retid == 12 | sales$retid == 19 | sales$retid == 20]]
t.test(sales_bigthree$std_price, sales_notthree$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_bigthree$std_price, sales_notthree$std_price, alternative = "less", conf.level=0.95)
sales_notpop[sales_notpop$internet == 1]$std_price
t.test(sales[sales$retid==9]$std_price, sales[sales$retid==13]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales[sales$retid==17]$std_price, sales[sales$retid==18]$std_price, alternative = "two.sided", conf.level=0.95)
??tidyr
??tidyr
??unite
?unite
install.packages("lubridate")
library("data.table")
sales <- fread("/Users/ericweber/Downloads/SMITH_BOOKS_FALL_2015.CSV")
sales$std_price <- 100* (sales$storepr/sales$listpr)
#Summarizing by internet/non
summary(sales_internet$std_price)
summary(sales_physical$std_price)
#Formal statistical test
t.test(sales_internet$std_price, sales_physical$std_price, alternative = "less", conf.level=0.95)
#Histograms
par(mfrow=c(2,1))
hist(sales_internet$std_price)
hist(sales_physical$std_price)
t.test(sales_internet$std_price, sales_physical$std_price, alternative = "less", conf.level=0.95)
var.test(sales_internet$std_price, sales_physical$std_price, alternative = "two.sided")
summary(sales_internet$std_price)
summary(sales_physical$std_price)
par(mfrow=c(2,1))
boxplot(sales_internet$std_price)
boxplot(sales_physical$std_price)
par(mfrow=c(2,1))
hist(sales_internet$std_price)
hist(sales_physical$std_price)
par(mfrow=c(2,1))
boxplot(sales_internet$std_price)
boxplot(sales_physical$std_price
boxplot(sales_internet$std_price)
boxplot(sales_physical$std_price)
boxplot(sales_internet$std_price)
boxplot(sales_physical$std_price)
par(mfrow=c(1,2))
boxplot(sales_internet$std_price)
boxplot(sales_physical$std_price)
par(mfrow=c(2,1))
hist(sales_internet$std_price)
hist(sales_physical$std_price)
sales_internet <- subset(sales, internet = 1)
library("data.table")
sales <- fread("/Users/ericweber/Downloads/SMITH_BOOKS_FALL_2015.CSV")
sales$std_price <- 100*(sales$storepr/sales$listpr)
sales$std_price <- 100*(sales$storepr/sales$listpr)
View(sales)
sales_internet <- subset(sales, internet == 1)
sales_physical <- subset(sales, internet == 0)
summary(sales_internet$std_price)
summary(sales_physical$std_price)
list_median <- median(sales$listpr)
sales$above_below <- ifelse(sales$listpr >= list_median,1, 0)
sales_above <- subset(sales, listpr >= median(listpr))
sales_below <- subset(sales, listpr < median(listpr))
sales_hardcover <- subset(sales, hardcovr== 1)
sales_soft <- subset(sales,hardcovr == 0)
sales_pop <- subset(sales,popular== 1)
sales_notpop <- subset(sales,popular == 0)
hist(sales_above[sales_above$internet==1]$std_price)
hist(sales_above[sales_above$internet==0]$std_price)
hist(sales_below[sales_below$internet==1]$std_price)
hist(sales_below[sales_below$internet==0]$std_price)
par(mfrow=c(2,1))
hist(sales_hardcover[sales_hardcover$internet == 1]$std_price)
hist(sales_hardcover[sales_hardcover$internet == 0]$std_price)
par(mfrow=c(2,1))
hist(sales_soft[sales_soft$internet == 1]$std_price)
hist(sales_soft[sales_soft$internet == 0]$std_price)
source('~/Dropbox/MSBA/Mini_project.R')
t.test(sales_bigthree$std_price, sales_notthree$std_price, alternative = "less", conf.level=0.95)
install.packages("markdown")
library("data.table")
sales <- fread("/Users/ericweber/Downloads/SMITH_BOOKS_FALL_2015.CSV")
sales$std_price <- round(100*(sales$storepr/sales$listpr),2)
sales_internet <- subset(sales, internet == 1)
sales_physical <- subset(sales, internet == 0)
summary(sales_internet$std_price)
summary(sales_physical$std_price)
var.test(sales_internet$std_price, sales_physical$std_price, alternative = "two.sided")
t.test(sales_internet$std_price, sales_physical$std_price, alternative = "less", conf.level=0.95)
par(mfrow=c(1,2))
boxplot(sales_internet$std_price)
boxplot(sales_physical$std_price)
par(mfrow=c(2,1))
hist(sales_internet$std_price)
hist(sales_physical$std_price)
par(mfrow=c(2,1))
hist(sales_above[sales_above$internet==1]$std_price)
hist(sales_above[sales_above$internet==0]$std_price)
sales_above <- subset(sales, listpr >= median(listpr))
sales_below <- subset(sales, listpr < median(listpr))
median(sales$listpr)
par(mfrow=c(2,1))
hist(sales_above[sales_above$internet==1]$std_price)
hist(sales_above[sales_above$internet==0]$std_price)
par(mfrow=c(2,1))
hist(sales_below[sales_below$internet==1]$std_price)
hist(sales_below[sales_below$internet==0]$std_price)
t.test(sales_above[sales_above$internet==1]$std_price,
sales_above[sales_above$internet==0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_below[sales_below$internet==1]$std_price,
sales_below[sales_below$internet==0]$std_price, alternative = "two.sided", conf.level=0.95)
sales_hardcover <- subset(sales, hardcovr== 1)
sales_soft <- subset(sales,hardcovr == 0)
t.test(sales_hardcover[sales_hardcover$internet == 1]$std_price,
sales_hardcover[sales_hardcover$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_soft[sales_soft$internet == 1]$std_price,
sales_soft[sales_soft$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
sales_pop <- subset(sales,popular== 1)
sales_notpop <- subset(sales,popular == 0)
t.test(sales_pop[sales_pop$internet == 1]$std_price,
sales_pop[sales_pop$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_notpop[sales_notpop$internet == 1]$std_price,
sales_notpop[sales_notpop$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_bigthree$std_price, sales_notthree$std_price, alternative = "less", conf.level=0.95)
sales_bigthree <- sales[sales[,sales$retid == 1 | sales$retid == 9 | sales$retid == 17]]
sales_notthree <- sales[sales[,sales$retid == 2 | sales$retid == 10 | sales$retid == 11
| sales$retid == 12 | sales$retid == 19 | sales$retid == 20]]
t.test(sales_bigthree$std_price, sales_notthree$std_price, alternative = "less", conf.level=0.95)
t.test(sales[sales$retid==9]$std_price, sales[sales$retid==13]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales[sales$retid==17]$std_price, sales[sales$retid==18]$std_price, alternative = "two.sided", conf.level=0.95)
install.packages("fgof")
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("ggplot2")
?vapply
?rev
?sort
summary(sales_internet$std_price)
summary(sales_physical$std_price)
var.test(sales_internet$std_price, sales_physical$std_price, alternative = "two.sided")
par(mfrow=c(1,2))
boxplot(sales_internet$std_price)
boxplot(sales_physical$std_price)
par(mfrow=c(2,1))
hist(sales_internet$std_price)
hist(sales_physical$std_price)
t.test(sales_internet$std_price, sales_physical$std_price, alternative = "less", conf.level=0.95)
sales_above <- subset(sales, listpr >= median(listpr))
sales_below <- subset(sales, listpr < median(listpr))
par(mfrow=c(2,1))
hist(sales_above[sales_above$internet==1]$std_price)
hist(sales_above[sales_above$internet==0]$std_price)
t.test(sales_above[sales_above$internet==1]$std_price,
sales_above[sales_above$internet==0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_below[sales_below$internet==1]$std_price,
sales_below[sales_below$internet==0]$std_price, alternative = "two.sided", conf.level=0.95)
sales_hardcover <- subset(sales, hardcovr== 1)
sales_soft <- subset(sales,hardcovr == 0)
t.test(sales_hardcover[sales_hardcover$internet == 1]$std_price,
sales_hardcover[sales_hardcover$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_soft[sales_soft$internet == 1]$std_price,
sales_soft[sales_soft$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
sales_pop <- subset(sales,popular== 1)
sales_notpop <- subset(sales,popular == 0)
t.test(sales_pop[sales_pop$internet == 1]$std_price,
sales_pop[sales_pop$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales_notpop[sales_notpop$internet == 1]$std_price,
sales_notpop[sales_notpop$internet == 0]$std_price, alternative = "two.sided", conf.level=0.95)
sales_bigthree <- sales[sales[,sales$retid == 1 | sales$retid == 9 | sales$retid == 17]]
sales_notthree <- sales[sales[,sales$retid == 2 | sales$retid == 10 | sales$retid == 11
| sales$retid == 12 | sales$retid == 19 | sales$retid == 20]]
## Formal Tests
t.test(sales_bigthree$std_price, sales_notthree$std_price, alternative = "more", conf.level=0.95)
t.test(sales_bigthree$std_price, sales_notthree$std_price, alternative = "greater", conf.level=0.95)
t.test(sales_bigthree$std_price, sales_notthree$std_price, alternative = "less", conf.level=0.95)
var.test(sales_bigthree$std_price, sales_bigthree$std_price, alternative = "two.sided")
var.test(sales_bigthree$std_price, sales_notthree$std_price, alternative = "two.sided")
t.test(sales[sales$retid==9]$std_price, sales[sales$retid==13]$std_price, alternative = "two.sided", conf.level=0.95)
t.test(sales[sales$retid==17]$std_price, sales[sales$retid==18]$std_price, alternative = "two.sided", conf.level=0.95)
install.packages("lubridate")
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("lubridate")
??lubridate
?which
library("hflights")
library(hflights)
install.packages("lubridate")
install.packages("lubridate")
??mutate
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("caret")
install.packages("caret")
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("shiny")
shiny::runApp('Dropbox/datasciencecoursera/DataScience8MachineLearning/first_shiny')
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("rcharts")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(manipulate)
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("manipulate")
library(manipulate)
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
??dTable
library(shiny)
shiny::runGitHub(repo = "shinyApps", username = "lebebr01", subdir = "guessCorr")
library(shiny)
shiny::runGitHub(repo = "shinyApps", username = "lebebr01", subdir = "guessCorr")
runApp(display.mode = 'showcase')
library(shiny)
library(shiny)
runApp(display.mode = 'showcase')
setwd("/Users/ericweber/Dropbox/datasciencecoursera/DataScience9DataProducts/Shiny_Ex_1")
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
install.packages("UsingR")
install.packages("rCharts")
install.packages("base64enc")
install.packages("rCharts")
install.packages("rMaps")
library(devtools)
install_github("ramnathv/rCharts")
install_github("ramnathv/rMaps")
library(iris)
names(iris)
names(iris) <- gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('fig1/r1.html', cdn = TRUE)
cat('<iframe src = "fig/r1.html" width = 100%, height = 600></iframe>')
cat('<iframe src = "fig/r1.html" width = 100%, height = 600></iframe>')
library(rCharts)
names(iris) <- gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('fig1/r1.html', cdn = TRUE)
library(rCharts)
names(iris) <- gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('/Users/ericweber/Dropbox/datasciencecoursera/DataScience9DataProducts/fig1/r1.html', cdn = TRUE)
library(rCharts)
names(iris) <- gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1
r1$save('/Users/ericweber/Dropbox/datasciencecoursera/DataScience9DataProducts/fig1/r1.html', cdn = TRUE)
r1$save('/Users/ericweber/Dropbox/datasciencecoursera/DataScience9DataProducts', cdn = TRUE)
install_github("slidify", "ramnathv")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
library(rCharts)
library(slidify)
names(iris) <- gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('/Users/ericweber/Dropbox/datasciencecoursera/DataScience9DataProducts', cdn = TRUE)
cat('<iframe src="fig/r1.html" width = 100%, height = 600></iframe>')
library(rCharts)
library(slidifyLibraries)
names(iris) <- gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('/Users/ericweber/Dropbox/datasciencecoursera/DataScience9DataProducts', cdn = TRUE)
cat('<iframe src="fig/r1.html" width = 100%, height = 600></iframe>')
r1$save('/Users/ericweber/Dropbox/datasciencecoursera/DataScience9DataProducts/fig/r1.html', cdn = TRUE)
source('~/Dropbox/datasciencecoursera/DataScience9DataProducts/rCharts.R')
require(rCharts)
names(iris) <- gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$show('inline')
r1
require(rCharts)
haireye <- as.data.frame(HairEyeColor)
n1 <- nPlot(Freq~Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig1/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html' width = 100%, height=600></iframe>')
n1
