testSA = SAheart[-train,]
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
names(SAheart)
missClass(testSA$chd, predict(modelSA, newdata = testSA))
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
names(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
## 1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal$Case,
p = 0.6, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
dim(training)
dim(testing)
set.seed(125)
modfit1 <- train(Class ~ ., method = "rpart", data=training)
plot(modfit1$finalModel, uniform = TRUE, main = "Classification Tree")
text(modfit1$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
library(rattle)
fancyRpartPlot(modfit1$finalModel)
modfit1$finalModel
## 1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal$Case,
p = 0.7, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
dim(training)
dim(testing)
set.seed(125)
modfit1 <- train(Class ~ ., method = "rpart", data=training)
plot(modfit1$finalModel, uniform = TRUE, main = "Classification Tree")
text(modfit1$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
library(rattle)
fancyRpartPlot(modfit1$finalModel)
modfit1$finalModel
set.seed(33833)
modfit2 <- train(y ~ ., method = "rpart", data=vowel.train)
varlmp(modfit2)
library(caret)
varlmp(modfit2)
set.seed(33833)
modfit2 <- randomForest(y ~ ., data=vowel.train)
varlmp(modfit2)
library(randomForest)
library(caret)
varImp(modfit2)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modfit2 <- randomForest(y ~ ., data=vowel.train)
library(randomForest)
library(caret)
varImp(modfit2)
order(varImp(modfit2))
R.home(component = "home")
path.expand(~)
mean(2,3)
mean(c(2,3))
colSums(c(2,3))
colSums(2,3)
library(ElemStatLearn)
data(prostate)
str(prostate)
source('~/Dropbox/datasciencecourseraPersonal/DataScience8MachineLearning/Week_4_FollowingAlong.R')
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(rpart.plot)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
install.packages("forecast")
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(rpart.plot)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
data("vowel.train")
data("vowel.test")
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
??train
set.seed(33833)
rf <- train(y ~ ., method = "rpart", data = vowel.train)
gbm <- train(y ~., method = "gbm", data = vowel.train)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(rpart.plot)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
## 1
data("vowel.train")
data("vowel.test")
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
names(vowel.train)
rf <- train(y ~ ., method = "rpart", data = vowel.train)
gbm <- train(y ~ ., method = "gbm", data = vowel.train)
gbm
rf
rf_test <- predict(rf, newdata = vowel.test)
gbm_test <- predict(gbm, newdata = vowel.test)
rf_test
rftest$finalModel
rf_test$finalModel
rf_test <- predict(rf, newdata = vowel.test)
gbm_test <- predict(gbm, newdata = vowel.test)
confusionMatrix(vowel.test$y,predict(rf_test,gbm_test))
data("vowel.train")
data("vowel.test")
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
rf <- train(y ~ ., method = "rpart", data = vowel.train)
gbm <- train(y ~ ., method = "gbm", data = vowel.train)
rf_test <- predict(rf, newdata = vowel.test)
gbm_test <- predict(gbm, newdata = vowel.test)
confusionMatrix(vowel.test$y,predict(rf_test,gbm_test))
confusionMatrix(vowel.test$y,predict(rf,gbm))
confusionMatrix(vowel.test$y,predict(rf,gbm))
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
rf_1 <- train(y ~ ., method = "rf", data = vowel.train)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(rpart.plot)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
library(randomForest)
## 1
data("vowel.train")
data("vowel.test")
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
rf_1 <- train(y ~ ., method = "rf", data = vowel.train)
gbm_1 <- train(y ~ ., method = "gbm", data = vowel.train)
rf_test <- predict(rf_1, newdata = vowel.test)
gbm_test <- predict(gbm_1, newdata = vowel.test)
rf_test
rf_1
rf_test
rf_test <- predict(rf_1, newdata = vowel.test)
gbm_test <- predict(gbm_1, newdata = vowel.test)
rf_test
confusionMatrix(vowel.test$y,predict(rf_test,gbm_test))
confusionMatrix(rf_test$y,vowel.test)
names(rf_test)
rf_test
confusionMatrix(rf_test,vowel.test$y)
confusionMatrix(gbm_test, vowel.test$y)
confusionMatrix(gbm_test, rf_test)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training_2 = adData[ inTrain,]
testing_2 = adData[-inTrain,]
set.seed(62433)
rf_2 <- train(diagnosis ~ ., method = "rf", data = training_2)
gbm_2 <- train(diagnosis ~ ., method = "gbm", data = training_2)
lda_2 <- train(diagnosis ~ ., method = "lda", data = training_2)
rf_2_test <- train(diagnosis ~ ., method = "rf", newdata = testing_2)
gbm_2_test <- train(diagnosis ~ ., method = "gbm", newdata = testing_2)
lda_2_test <- train(diagnosis ~ ., method = "lda", newdata = testing_2)
testing_2 = adData[-inTrain,]
rf_2_test <- train(diagnosis ~ ., newdata = testing_2)
gbm_2_test <- train(diagnosis ~ ., newdata = testing_2)
lda_2_test <- train(diagnosis ~ ., newdata = testing_2)
rf_2_test <- predict(diagnosis ~ ., newdata = testing_2)
gbm_2_test <- predict(diagnosis ~ ., newdata = testing_2)
lda_2_test <- predict(diagnosis ~ ., newdata = testing_2)
rf_2_test <- predict(rf_2, newdata = testing_2)
gbm_2_test <- predict(gbm_2 ~ ., newdata = testing_2)
lda_2_test <- predict(lda_2 ~ ., newdata = testing_2)
rf_2_test <- predict(rf_2, newdata = testing_2)
gbm_2_test <- predict(gbm_2, newdata = testing_2)
lda_2_test <- predict(lda_2, newdata = testing_2)
rf_2_test
confusionMatrix(rf_2_test, testing_2$diagnosis)
confusionMatrix(gbm_2_test, testing_2$diagnosis)
confusionMatrix(lda_2_test, testing_2$diagnosis)
comb_data <- data.frame(rf = rf_2_test, gbm = gbm_2_test, lda = lda_2_test, diagnosis = training_2$diagnosis)
length(rf_2_test)
length(gbm_2_test)
length(training_2_diagnosis)
length(training_2$diagnosis)
length(training_2)
rf_2_pred <- predict(rf_2, newdata = training_2)
gbm_2_pred <- predict(gbm_2, newdata = training_2)
lda_2_pred <- predict(lda_2, newdata = training_2)
comb_data <- data.frame(rf = rf_2_pred, gbm = gbm_2_pred, lda = lda_2__pred, diagnosis = training_2$diagnosis)
comb_data <- data.frame(rf = rf_2_pred, gbm = gbm_2_pred, lda = lda_2_pred, diagnosis = training_2$diagnosis)
model_comb <- train(diagnosis ~ ., method = "rf", data = comb_data)
rf_2_test <- predict(rf_2, newdata = testing_2)
gbm_2_test <- predict(gbm_2, newdata = testing_2)
lda_2_test <- predict(lda_2, newdata = testing_2)
comb_data_2_test <- data.frame(rf = rf_2_test, gbm = gbm_2_test, lda = lda_2_test, diagnosis = testing_2$diagnosis)
comb_2_test <- predict(model_comb, comb_data_2_test)
confusionMatrix(comb_2_test, testing_2$diagnosis)
confusionMatrix(rf_2_test, testing_2$diagnosis)
confusionMatrix(gbm_2_test, testing_2$diagnosis)
confusionMatrix(lda_2_test, testing_2$diagnosis)
confusionMatrix(comb_2_test, testing_2$diagnosis)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(rpart.plot)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
library(randomForest)
## 1
data("vowel.train")
data("vowel.test")
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
rf_1 <- train(y ~ ., method = "rf", data = vowel.train)
gbm_1 <- train(y ~ ., method = "gbm", data = vowel.train)
rf_1_test <- predict(rf_1, newdata = vowel.test)
gbm_2_test <- predict(gbm_1, newdata = vowel.test)
confusionMatrix(rf_test,vowel.test$y)
confusionMatrix(gbm_test, vowel.test$y)
confusionMatrix(gbm_test, rf_test)
gbm_test
rf_test
set.seed(33833)
rf_1 <- train(y ~ ., method = "rf", data = vowel.train)
gbm_1 <- train(y ~ ., method = "gbm", data = vowel.train)
rf_1_test <- predict(rf_1, newdata = vowel.test)
gbm_1_test <- predict(gbm_1, newdata = vowel.test)
confusionMatrix(rf_1_test,vowel.test$y)
confusionMatrix(gbm_1_test, vowel.test$y)
confusionMatrix(gbm_1_test, rf_1_test)
rf_1 == gbm_1
rf_1
rf_1_test
rf_1_test == gbm_1_test
agreed_test <- rf_1_test [rf_1_test == gbm_1_test]
agreed_test
vowel.test$y[rf_1_test == gbm_1_test]
confusionMatrix(agreed_test, vowel.test$y[rf_1_test == gbm_1_test])
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain_2 = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training_2 = adData[ inTrain,]
testing_2 = adData[-inTrain,]
set.seed(62433)
rf_2 <- train(diagnosis ~ ., method = "rf", data = training_2)
gbm_2 <- train(diagnosis ~ ., method = "gbm", data = training_2)
lda_2 <- train(diagnosis ~ ., method = "lda", data = training_2)
rf_2_pred <- predict(rf_2, newdata = training_2)
gbm_2_pred <- predict(gbm_2, newdata = training_2)
lda_2_pred <- predict(lda_2, newdata = training_2)
comb_data <- data.frame(rf = rf_2_pred, gbm = gbm_2_pred, lda = lda_2_pred, diagnosis = training_2$diagnosis)
model_comb <- train(diagnosis ~ ., method = "rf", data = comb_data)
rf_2_test <- predict(rf_2, newdata = testing_2)
gbm_2_test <- predict(gbm_2, newdata = testing_2)
lda_2_test <- predict(lda_2, newdata = testing_2)
comb_data_2_test <- data.frame(rf = rf_2_test, gbm = gbm_2_test, lda = lda_2_test, diagnosis = testing_2$diagnosis)
comb_2_test <- predict(model_comb, comb_data_2_test)
confusionMatrix(rf_2_test, testing_2$diagnosis)
confusionMatrix(gbm_2_test, testing_2$diagnosis)
confusionMatrix(lda_2_test, testing_2$diagnosis)
confusionMatrix(comb_2_test, testing_2$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain_3 = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training_3 = concrete[ inTrain,]
testing_3 = concrete[-inTrain,]
??lasso
install.packages("lasso2")
install.packages('elasticnet')
library(elasticnet)
set.seed(3523)
library(elasticnet)
library(AppliedPredictiveModeling)
data(concrete)
inTrain_3 = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training_3 = concrete[ inTrain,]
testing_3 = concrete[-inTrain,]
set.seed(233)
concrete
head(concrete)
pred <- subset(cement, -c(CompressiveStrength))
pred <- subset(cement, CompressiveStrength)
pred <- subset(cement, -c("CompressiveStrength"))
pred <- subset(cement, -c(CompressiveStrength))
names(cement)
pred <- subset(concrete, -c(CompressiveStrength))
pred <- concrete[, -c("CompressiveStrength")]
pred <- concrete[, -c(CompressiveStrength)]
names(concrete)
pred <- concrete[, -(CompressiveStrength)]
pred <- concrete[, -CompressiveStrength]
pred <- concrete[, -c("CompressiveStrength")]
pred <- concrete[, - c("CompressiveStrength")]
pred <- concrete[, !c("CompressiveStrength")]
pred <- concrete[!CompressiveStrength]
concrete$CompressiveStrength
pred <- concrete$CompressiveStrength <- NULL
names(pred)
pred
set.seed(3523)
library(elasticnet)
library(AppliedPredictiveModeling)
data(concrete)
inTrain_3 = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training_3 = concrete[ inTrain,]
testing_3 = concrete[-inTrain,]
set.seed(233)
set.seed(3523)
library(elasticnet)
library(AppliedPredictiveModeling)
data(concrete)
inTrain_3 = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training_3 = concrete[ inTrain,]
testing_3 = concrete[-inTrain,]
names(training_3)
enet(x=c(1:8), y=CompressiveStrength, lambda=0)
enet(x= concrete[,c(1:8)], y=concrete$CompressiveStrength, lambda=0)
concrete[,c(1:8)]
enet(x= concrete[,c(1:8)], y=concrete[,c(9)], lambda=0)
str(concrete)
?plot.enet
enet(x= concrete[,c(1:8)], y=concrete[,c(9)], lambda=1)
enet(concrete[,c(1:8)], concrete[,c(9)], lambda=1)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("/Users/ericweber/Dropbox/datasciencecourseraPersonal/DataScience8MachineLearning/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
matrix(concrete[,c(1:8)])
class(concrete[,c(1:8)])
as.matrix(concrete[,c(1:8)])
enet(as.matrix(concrete[,c(1:8)]), as.matrix(concrete[,c(9)]), lambda=1)
plot.enet(enet_3)
enet_3 <- enet(as.matrix(concrete[,c(1:8)]), as.matrix(concrete[,c(9)]), lambda=1)
plot.enet(enet_3)
enet_3$finalModel
str(enet_3)
enet_3 <- enet(as.matrix(concrete[,c(1:8)]), as.matrix(concrete[,c(9)]), lambda=0)
plot.enet(enet_3)
enet_3 <- enet(as.matrix(concrete[,c(1:8)]), as.matrix(concrete[,c(9)]), lambda=0)
enet_pred <- predict(enet_3, newdata = testing_3)
enet_pred
set.seed(233)
lassoFit <- train(training_3$CompressiveStrength ~ ., method="lasso", data=training)
lassoPred <- predict(lassoFit,testing_3)
plot.enet(lassoFit$finalModel, xvar="penalty", use.color=T)
set.seed(3523)
library(elasticnet)
library(AppliedPredictiveModeling)
data(concrete)
inTrain_3 = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training_3 = concrete[ inTrain,]
testing_3 = concrete[-inTrain,]
set.seed(233)
lassoFit <- train(training_3$CompressiveStrength ~ ., method="lasso", data=training)
set.seed(233)
lassoFit <- train(training_3$CompressiveStrength ~ ., method="lasso", data=training_3)
lassoPred <- predict(lassoFit,testing_3)
plot.enet(lassoFit$finalModel, xvar="penalty", use.color=T)
library(lubridate) # For year() function below
dat = read.csv("/Users/ericweber/Dropbox/datasciencecourseraPersonal/DataScience8MachineLearning/gaData.csv")
training_4 = dat[year(dat$date) < 2012,]
testing_4 = dat[(year(dat$date)) > 2011,]
tstrain_4 = ts(training_4$visitsTumblr)
names(tstrain_4)
tstrain4
library(lubridate) # For year() function below
dat = read.csv("/Users/ericweber/Dropbox/datasciencecourseraPersonal/DataScience8MachineLearning/gaData.csv")
training_4 = dat[year(dat$date) < 2012,]
testing_4 = dat[(year(dat$date)) > 2011,]
tstrain_4 = ts(training_4$visitsTumblr)
View(tstrain_44)
View(tstrain_4)
bats_4 <- bats(tstrain_4)
bats_4
plot(forecast(bats_4))
bats_4 <- bats(tstrain_4)
pred <- forecast(bats_4, h = length(testing_4$visitsTumblr), level = c(80,95))
bats_4 <- bats(tstrain_4)
pred <- forecast(bats_4, level = 95, h = dim(testing_4)[1])
sum(pred$lower < testing_4$visitsTumblr & testing_4$visitsTumblr < pred$upper) /
dim(testing_4)[1]
pred
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain_5 = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training_5 = concrete[ inTrain,]
testing_5 = concrete[-inTrain,]
bats_4 <- bats(tstrain_4)
pred_4 <- forecast(bats_4, level = 95, h = dim(testing_4)[1])
sum(pred_4$lower < testing_4$visitsTumblr & testing_4$visitsTumblr < pred_4$upper) /
dim(testing_4)[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain_5 = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training_5 = concrete[ inTrain,]
testing_5 = concrete[-inTrain,]
?e1071
??e1071
pred_5 <- svm.model <- svm(CompressiveStrength ~ ., data = training_5)
names(training_5)
predicted_values <- predict(pred_5, newdata = testing_5)
predicted_values
accuracy(predicted_values, testing_5$CompressiveStrength)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain_5 = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training_5 = concrete[ inTrain,]
testing_5 = concrete[-inTrain,]
pred_5 <- svm(CompressiveStrength ~ ., data = training_5)
predicted_values <- predict(pred_5, newdata = testing_5)
accuracy(predicted_values, testing_5$CompressiveStrength)
set.seed(321)
library(e1071)
pred_5 <- svm(CompressiveStrength ~ ., data = training_5)
predicted_values <- predict(pred_5, newdata = testing_5)
accuracy(predicted_values, testing_5$CompressiveStrength)
set.seed(3525)
library(AppliedPredictiveModeling)
data(concrete)
inTrain_5 = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training_5 = concrete[ inTrain,]
testing_5 = concrete[-inTrain,]
set.seed(321)
library(e1071)
pred_5 <- svm(CompressiveStrength ~ ., data = training_5)
predicted_values <- predict(pred_5, newdata = testing_5)
accuracy(predicted_values, testing_5$CompressiveStrength)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain_5 = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training_5 = concrete[ inTrain,]
testing_5 = concrete[-inTrain,]
set.seed(325)
library(e1071)
mod_svm<- svm(CompressiveStrength ~ ., data = training_5)
pred_svm<- predict(pred_5,testing_5)
accuracy(pred_svm, testing_5$CompressiveStrength)
plot(pred_vsm, testing_5$CompressiveStrength,
pch=20, cex=1,
col=testing_5$Age,
main="Relationship between the svm forecast and actual values")
plot(pred_svm, testing_5$CompressiveStrength,
pch=20, cex=1,
col=testing_5$Age,
main="Relationship between the svm forecast and actual values")
local_path <- "/Users/ericweber/Dropbox/datasciencecourseraPersonal/DataScience8MachineLearning/Machine_Learning_Project"
setwd(local_path)
library(caret, quietly=TRUE)
url_train <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
url_test <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(url = url_train, destfile = 'data_train.csv')
download.file(url = url_test, destfile = 'data_test.csv')
pml_train <- read.csv(file = 'data_train.csv',
na.strings = c('NA','#DIV/0!',''))
pml_test <- read.csv(file = 'data_test.csv',
na.strings = c('NA','#DIV/0!',''))
